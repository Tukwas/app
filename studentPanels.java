/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package quizapplication;

//importing packages/statements....
import java.awt.Font;
import java.io.File;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.TimerTask;
import java.util.Timer;

public class studentPanels extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    private static final String quizfile = "quiz.json";
    private static final String FILEPATH = "C:\\Users\\User\\Documents\\NetBeansProjects\\quizApplication\\src\\quizapplication\\chat.json";
    private static volatile int countdownMinutes = 0;
    private static volatile int countdownSeconds = 0;
    private Timer messageUpdateTimer;
    private int lastDisplayedMessageCount = 0;
    private Timer quizTimer;
    private List<JSONObject> currentQuizQuestions;
    private int currentQuestionIndex;
    private int studentScore = 0;

    public studentPanels() {
        initComponents();
        tableModel = new DefaultTableModel(new Object[][]{}, new String[]{"Sender", "Message"});
        chats.setModel(tableModel);
        loadMessages();
        startMessageUpdater();
        easy.addActionListener(e -> chooseDifficulty("easy"));
        jButton1.addActionListener(e -> chooseDifficulty("medium"));
        jButton2.addActionListener(e -> chooseDifficulty("hard"));
        mix.addActionListener(e -> chooseDifficulty("shuffle"));

        // Start quiz button(edit this and apply directly to button)
        takeQuiz.addActionListener(e -> startQuiz());
        submit.addActionListener(e -> submitAnswer());


    }

    public studentPanels(String msg) {
        initComponents();
        tableModel = (DefaultTableModel) chats.getModel();
        try {
            File fontStyle = new File("C:\\Users\\User\\Documents\\NetBeansProjects\\quizApplication\\test\\fonts\\Heiback - PERSONAL USE ONLY.ttf");
            Font fo = Font.createFont(Font.TRUETYPE_FONT, fontStyle).deriveFont(30f);
            Font ko = Font.createFont(Font.TRUETYPE_FONT, fontStyle).deriveFont(5f);
            niknim.setFont(fo);
            give.setFont(fo);
        } catch (Exception e) {
            e.printStackTrace();
        }
        niknim.setText(msg);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        keeptoo.KGradientPanel kGradientPanel1 = new keeptoo.KGradientPanel();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        profile = new javax.swing.JPanel();
        niknim = new javax.swing.JLabel();
        javax.swing.JLabel pro = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        review = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        leaderboard = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        takeQuiz = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        message = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        pnlcard = new keeptoo.KGradientPanel();
        panel1 = new keeptoo.KGradientPanel();
        ms = new keeptoo.KGradientPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chats = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        search = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        send1 = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        chooseCategory = new keeptoo.KGradientPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        easy = new javax.swing.JButton();
        mix = new javax.swing.JButton();
        Quiz = new keeptoo.KGradientPanel();
        javax.swing.JLabel timeLabel = new javax.swing.JLabel();
        give = new javax.swing.JLabel();
        count2 = new javax.swing.JLabel();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        question = new javax.swing.JLabel();
        identify = new javax.swing.JTextField();
        submit = new javax.swing.JButton();
        count = new javax.swing.JLabel();
        panel7 = new keeptoo.KGradientPanel();

        jLabel1.setText("jLabel1");

        jLabel7.setText("jLabel7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        kGradientPanel1.setBackground(new java.awt.Color(0, 153, 153));
        kGradientPanel1.setkEndColor(new java.awt.Color(206, 92, 165));
        kGradientPanel1.setkStartColor(new java.awt.Color(240, 122, 46));

        kGradientPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        kGradientPanel2.setkEndColor(new java.awt.Color(206, 92, 165));
        kGradientPanel2.setkStartColor(new java.awt.Color(29, 0, 71));

        profile.setBackground(new java.awt.Color(127, 51, 123));
        profile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        niknim.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        niknim.setForeground(new java.awt.Color(255, 255, 255));
        niknim.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        niknim.setText("username");
        niknim.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                niknimAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        pro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quizapplication/profile.gif"))); // NOI18N

        javax.swing.GroupLayout profileLayout = new javax.swing.GroupLayout(profile);
        profile.setLayout(profileLayout);
        profileLayout.setHorizontalGroup(
            profileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, profileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pro, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(niknim, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        profileLayout.setVerticalGroup(
            profileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(profileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(niknim, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(profileLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(pro, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        review.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        review.setForeground(new java.awt.Color(0, 51, 51));
        review.setText("Review Quiz");
        review.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        review.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(review, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(review, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        leaderboard.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        leaderboard.setForeground(new java.awt.Color(0, 51, 51));
        leaderboard.setText("Leaderboard");
        leaderboard.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        leaderboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaderboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leaderboard, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leaderboard, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        takeQuiz.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        takeQuiz.setForeground(new java.awt.Color(0, 51, 51));
        takeQuiz.setText("Take a Quiz");
        takeQuiz.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        takeQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeQuizActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(takeQuiz, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(takeQuiz, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        message.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        message.setForeground(new java.awt.Color(0, 51, 51));
        message.setText("Message");
        message.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quizapplication/exit (1).png"))); // NOI18N
        jLabel2.setText("Log Out");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(profile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addComponent(profile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(29, 29, 29))
        );

        pnlcard.setLayout(new java.awt.CardLayout());

        panel1.setkEndColor(new java.awt.Color(206, 92, 165));
        panel1.setkStartColor(new java.awt.Color(240, 122, 46));

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 755, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        pnlcard.add(panel1, "card2");

        ms.setkEndColor(new java.awt.Color(206, 92, 165));
        ms.setkStartColor(new java.awt.Color(240, 122, 46));

        chats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Messages"
            }
        ));
        chats.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                chatsComponentAdded(evt);
            }
        });
        jScrollPane1.setViewportView(chats);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Say Something...");
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        search.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        search.setForeground(new java.awt.Color(0, 51, 51));
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        send1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        send1.setForeground(new java.awt.Color(0, 51, 51));
        send1.setText("Send");
        send1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send1ActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delete.setForeground(new java.awt.Color(0, 51, 51));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout msLayout = new javax.swing.GroupLayout(ms);
        ms.setLayout(msLayout);
        msLayout.setHorizontalGroup(
            msLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(msLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(msLayout.createSequentialGroup()
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, msLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(send1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 80, Short.MAX_VALUE))
        );

        msLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {delete, send1});

        msLayout.setVerticalGroup(
            msLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(msLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(msLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(send1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addContainerGap())
        );

        msLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {delete, search});

        pnlcard.add(ms, "card2");

        chooseCategory.setkEndColor(new java.awt.Color(206, 92, 165));
        chooseCategory.setkStartColor(new java.awt.Color(240, 122, 46));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Choose Dfficulty");

        jButton1.setText("Medium");
        jButton1.setMaximumSize(new java.awt.Dimension(76, 22));
        jButton1.setMinimumSize(new java.awt.Dimension(76, 22));
        jButton1.setPreferredSize(new java.awt.Dimension(76, 22));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Hard");
        jButton2.setMaximumSize(new java.awt.Dimension(76, 22));
        jButton2.setMinimumSize(new java.awt.Dimension(76, 22));
        jButton2.setPreferredSize(new java.awt.Dimension(76, 22));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        easy.setText("Easy");
        easy.setMaximumSize(new java.awt.Dimension(76, 22));
        easy.setMinimumSize(new java.awt.Dimension(76, 22));
        easy.setPreferredSize(new java.awt.Dimension(76, 22));
        easy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyActionPerformed(evt);
            }
        });

        mix.setText("Shuffle");
        mix.setMaximumSize(new java.awt.Dimension(76, 22));
        mix.setMinimumSize(new java.awt.Dimension(76, 22));
        mix.setPreferredSize(new java.awt.Dimension(76, 22));
        mix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mixActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chooseCategoryLayout = new javax.swing.GroupLayout(chooseCategory);
        chooseCategory.setLayout(chooseCategoryLayout);
        chooseCategoryLayout.setHorizontalGroup(
            chooseCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseCategoryLayout.createSequentialGroup()
                .addGroup(chooseCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(chooseCategoryLayout.createSequentialGroup()
                        .addGap(261, 261, 261)
                        .addComponent(jLabel3))
                    .addGroup(chooseCategoryLayout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addGroup(chooseCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(easy, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mix, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(299, Short.MAX_VALUE))
        );
        chooseCategoryLayout.setVerticalGroup(
            chooseCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseCategoryLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jLabel3)
                .addGap(42, 42, 42)
                .addComponent(easy, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mix, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
        );

        pnlcard.add(chooseCategory, "card6");

        Quiz.setkEndColor(new java.awt.Color(206, 92, 165));
        Quiz.setkStartColor(new java.awt.Color(240, 122, 46));

        timeLabel.setForeground(new java.awt.Color(255, 255, 255));
        timeLabel.setText("TimeLeft:");

        give.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        give.setForeground(new java.awt.Color(255, 255, 255));
        give.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        give.setText("Powered by: Java");

        count2.setForeground(new java.awt.Color(255, 255, 255));
        count2.setText("00:");

        kGradientPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Question", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        kGradientPanel3.setkEndColor(new java.awt.Color(206, 92, 165));
        kGradientPanel3.setkStartColor(new java.awt.Color(240, 122, 46));

        question.setBackground(new java.awt.Color(255, 255, 255));
        question.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        question.setForeground(new java.awt.Color(255, 255, 255));
        question.setText("jLabel2");

        identify.setText("Type Here...");
        identify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                identifyMouseClicked(evt);
            }
        });

        submit.setText("Submit");

        javax.swing.GroupLayout kGradientPanel3Layout = new javax.swing.GroupLayout(kGradientPanel3);
        kGradientPanel3.setLayout(kGradientPanel3Layout);
        kGradientPanel3Layout.setHorizontalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addContainerGap(110, Short.MAX_VALUE)
                .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel3Layout.createSequentialGroup()
                        .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel3Layout.createSequentialGroup()
                        .addComponent(identify, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(207, 207, 207))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel3Layout.createSequentialGroup()
                        .addComponent(submit)
                        .addGap(251, 251, 251))))
        );
        kGradientPanel3Layout.setVerticalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(identify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(submit)
                .addContainerGap(215, Short.MAX_VALUE))
        );

        count.setForeground(new java.awt.Color(255, 255, 255));
        count.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        count.setText("00");

        javax.swing.GroupLayout QuizLayout = new javax.swing.GroupLayout(Quiz);
        Quiz.setLayout(QuizLayout);
        QuizLayout.setHorizontalGroup(
            QuizLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QuizLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(count2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(count)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QuizLayout.createSequentialGroup()
                .addGap(0, 112, Short.MAX_VALUE)
                .addComponent(kGradientPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QuizLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(give, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        QuizLayout.setVerticalGroup(
            QuizLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QuizLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(QuizLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(count2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(give, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pnlcard.add(Quiz, "card6");

        panel7.setkEndColor(new java.awt.Color(206, 92, 165));
        panel7.setkStartColor(new java.awt.Color(240, 122, 46));

        javax.swing.GroupLayout panel7Layout = new javax.swing.GroupLayout(panel7);
        panel7.setLayout(panel7Layout);
        panel7Layout.setHorizontalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 755, Short.MAX_VALUE)
        );
        panel7Layout.setVerticalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        pnlcard.add(panel7, "card5");

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlcard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlcard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void niknimAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_niknimAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_niknimAncestorAdded

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        String keyword = jTextField1.getText().trim();
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a keyword to search.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        StringBuilder searchResults = new StringBuilder("Search Results:\n\n");
        boolean found = false;

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String message = (String) tableModel.getValueAt(i, 1); // Get the message column
            if (message.contains(keyword)) {
                found = true;
                searchResults.append("- ").append(message).append("\n");
            }
        }

        if (found) {
            JOptionPane.showMessageDialog(this, searchResults.toString(), "Search Results", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No messages found with the given keyword.", "Search Results", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_searchActionPerformed

    private void send1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send1ActionPerformed
        String message = jTextArea1.getText().trim();
        if (message.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Message cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        tableModel.addRow(new Object[]{"Student", message}); // Add to JTable
        saveMessages(); // Save to JSON file
        jTextArea1.setText(""); // Clear the text area


    }//GEN-LAST:event_send1ActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selectedRow = chats.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a message to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        tableModel.removeRow(selectedRow); // Remove from JTable
        saveMessages();

    }//GEN-LAST:event_deleteActionPerformed

    private void chatsComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_chatsComponentAdded

    }//GEN-LAST:event_chatsComponentAdded

    private void leaderboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaderboardActionPerformed
        pnlcard.removeAll();
        pnlcard.add(ms);
        pnlcard.repaint();
        pnlcard.revalidate();


    }//GEN-LAST:event_leaderboardActionPerformed

    private void jTextArea1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseClicked
        jTextArea1.setText("");
    }//GEN-LAST:event_jTextArea1MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadMessages();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        saveMessages();
    }//GEN-LAST:event_formWindowClosed

    private void takeQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeQuizActionPerformed
        pnlcard.removeAll();
        pnlcard.add(chooseCategory);
        pnlcard.repaint();
        pnlcard.revalidate();
    }//GEN-LAST:event_takeQuizActionPerformed

    private void identifyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_identifyMouseClicked
        identify.setText("");
    }//GEN-LAST:event_identifyMouseClicked

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageActionPerformed

    private void reviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reviewActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.dispose();
        log lo = new log();
        lo.pack();
        lo.setVisible(false);
        lo.setLocationRelativeTo(null);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void easyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_easyActionPerformed

    private void mixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mixActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mixActionPerformed
    public static synchronized void updateTimer(int minutes, int seconds) {
        countdownMinutes = minutes;
        countdownSeconds = seconds;

        SwingUtilities.invokeLater(() -> {
            count2.setText(String.format("%02d", countdownMinutes));
            count.setText(String.format("%02d", countdownSeconds));
        });
    }

    private void chooseDifficulty(String difficulty) {
        currentQuizQuestions = loadQuestionsByDifficulty(difficulty);
        if (currentQuizQuestions.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No questions available for the selected difficulty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        currentQuestionIndex = 0;
        studentScore = 0;
        Collections.shuffle(currentQuizQuestions); // Randomize questions
        startQuiz();
    }

    private List<JSONObject> loadQuestionsByDifficulty(String difficulty) {
        List<JSONObject> questions = new ArrayList<>();
        try (FileReader reader = new FileReader(quizfile)) {
            JSONParser parser = new JSONParser();
            JSONObject quizData = (JSONObject) parser.parse(reader);
            JSONArray quizArray = (JSONArray) quizData.get("quiz");

            for (Object obj : quizArray) {
                JSONObject questionObj = (JSONObject) obj;
                if (difficulty.equalsIgnoreCase((String) questionObj.get("difficulty"))) {
                    questions.add(questionObj);
                }
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading quiz data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return questions;
    }

    private void startQuiz() {
        pnlcard.removeAll();
        pnlcard.add(Quiz);
        pnlcard.repaint();
        pnlcard.revalidate();
        showNextQuestion();
        startQuizTimer(10); // Set duration to 10 minutes (or adjust as needed)
    }

    private void showNextQuestion() {
        if (currentQuestionIndex >= currentQuizQuestions.size()) {
            endQuiz();
            return;
        }

        JSONObject currentQuestion = currentQuizQuestions.get(currentQuestionIndex);
        question.setText((String) currentQuestion.get("question"));
        identify.setText("");
    }

    private void startQuizTimer(int durationMinutes) {
        countdownMinutes = durationMinutes;
        countdownSeconds = 0;

        quizTimer = new Timer();
        quizTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (countdownSeconds == 0) {
                    if (countdownMinutes == 0) {
                        quizTimer.cancel();
                        SwingUtilities.invokeLater(() -> endQuiz());
                        return;
                    }
                    countdownMinutes--;
                    countdownSeconds = 59;
                } else {
                    countdownSeconds--;
                }

                SwingUtilities.invokeLater(() -> {
                    count2.setText(String.format("%02d:", countdownMinutes));
                    count.setText(String.format("%02d", countdownSeconds));
                });
            }
        }, 0, 1000);
    }

    private void endQuiz() {
        quizTimer.cancel();
        JOptionPane.showMessageDialog(this, "Time is up! Your score: " + studentScore, "Quiz Over", JOptionPane.INFORMATION_MESSAGE);
        pnlcard.removeAll();
        pnlcard.add(panel1); // Return to the main panel
        pnlcard.repaint();
        pnlcard.revalidate();
    }

    private void submitAnswer() {
        if (currentQuestionIndex >= currentQuizQuestions.size()) {
            return;
        }

        String studentAnswer = identify.getText().trim();
        JSONObject currentQuestion = currentQuizQuestions.get(currentQuestionIndex);
        String correctAnswer = (String) currentQuestion.get("answer");

        if (studentAnswer.equalsIgnoreCase(correctAnswer)) {
            int points = ((Long) currentQuestion.get("points")).intValue();
            studentScore += points;
        }

        currentQuestionIndex++;
        showNextQuestion();
    }

    private void startMessageUpdater() {
        messageUpdateTimer = new Timer();
        messageUpdateTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                SwingUtilities.invokeLater(() -> updateMessagesInRealTime());
            }
        }, 0, 2000); // Check every 2 seconds
    }

    private synchronized void updateMessagesInRealTime() {
        File file = new File(FILEPATH);
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "Message file not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (FileReader reader = new FileReader(file)) {
            JSONObject chatData = (JSONObject) new JSONParser().parse(reader);

            // Fetch teacher and student messages from JSON
            JSONArray teacherMessages = (JSONArray) chatData.getOrDefault("teacher", new JSONArray());
            JSONArray studentMessages = (JSONArray) chatData.getOrDefault("student", new JSONArray());

            // Check if there are new messages by comparing counts
            int totalMessages = teacherMessages.size() + studentMessages.size();
            if (totalMessages > lastDisplayedMessageCount) {
                // Add new teacher messages to the JTable
                for (int i = lastDisplayedMessageCount - studentMessages.size(); i < teacherMessages.size(); i++) {
                    if (i < 0) {
                        continue; // Prevent negative index
                    }
                    JSONObject teacherMessage = (JSONObject) teacherMessages.get(i);
                    tableModel.addRow(new Object[]{"Teacher", teacherMessage.get("message")});
                }

                // Add new student messages (if applicable) to the JTable
                for (int i = lastDisplayedMessageCount - teacherMessages.size(); i < studentMessages.size(); i++) {
                    if (i < 0) {
                        continue; // Prevent negative index
                    }
                    JSONObject studentMessage = (JSONObject) studentMessages.get(i);
                    tableModel.addRow(new Object[]{"Student", studentMessage.get("message")});
                }

                // Update the last displayed message count
                lastDisplayedMessageCount = totalMessages;
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error updating messages: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private synchronized void appendMessage(String sender, String message) {
        File file = new File(FILEPATH);
        JSONObject chatData = new JSONObject();

        try (FileReader reader = new FileReader(file)) {
            chatData = (JSONObject) new JSONParser().parse(reader);
        } catch (IOException | ParseException e) {
            // Log error but proceed to create a new JSON object
        }

        JSONArray messages = (JSONArray) chatData.getOrDefault("messages", new JSONArray());
        JSONObject newMessage = new JSONObject();
        newMessage.put("sender", sender);
        newMessage.put("message", message);
        messages.add(newMessage);
        chatData.put("messages", messages);

        chatData.put(sender.equals("Teacher") ? "teacher" : "student", messages);

        // Save the updated JSON data back to the file
        try (FileWriter writer = new FileWriter(file)) {
            writer.write(chatData.toJSONString());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving message: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadMessages() {
        File file = new File(FILEPATH);
        if (!file.exists()) {
            return;
        }

        try (FileReader reader = new FileReader(file)) {
            JSONObject chatData = (JSONObject) new JSONParser().parse(reader);

            tableModel.setRowCount(0); // Clear existing messages

            // Load teacher messages
            JSONArray teacherMessages = (JSONArray) chatData.getOrDefault("teacher", new JSONArray());
            // Load student messages
            JSONArray studentMessages = (JSONArray) chatData.getOrDefault("student", new JSONArray());

            // Alternate display between teacher and student messages
            int teacherIndex = 0;
            int studentIndex = 0;

            while (teacherIndex < teacherMessages.size() || studentIndex < studentMessages.size()) {
                if (teacherIndex < teacherMessages.size()) {
                    JSONObject teacherMessage = (JSONObject) teacherMessages.get(teacherIndex);
                    tableModel.addRow(new Object[]{"Teacher", teacherMessage.get("message")});
                    teacherIndex++;
                }
                if (studentIndex < studentMessages.size()) {
                    JSONObject studentMessage = (JSONObject) studentMessages.get(studentIndex);
                    tableModel.addRow(new Object[]{"Student", studentMessage.get("message")});
                    studentIndex++;
                }
            }

        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading messages: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveMessages() {
        File file = new File(FILEPATH);
        JSONObject chatData = new JSONObject();

        // Retrieve existing data
        try (FileReader reader = new FileReader(file)) {
            chatData = (JSONObject) new JSONParser().parse(reader);
        } catch (IOException | ParseException e) {
            // Log error but proceed to save new messages
        }

        // Separate teacher and student messages
        JSONArray teacherMessages = (JSONArray) chatData.getOrDefault("teacher", new JSONArray());
        JSONArray studentMessages = new JSONArray();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String sender = (String) tableModel.getValueAt(i, 0);
            String message = (String) tableModel.getValueAt(i, 1);

            JSONObject messageObject = new JSONObject();
            messageObject.put("message", message);

            if ("Teacher".equals(sender)) {
                teacherMessages.add(messageObject);
            } else if ("Student".equals(sender)) {
                studentMessages.add(messageObject);
            }
        }

        // Save teacher and student messages back to JSON
        chatData.put("teacher", teacherMessages);
        chatData.put("student", studentMessages);

        try (FileWriter writer = new FileWriter(file)) {
            writer.write(chatData.toJSONString());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving messages: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sendMessage(String message) {
        if (message.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Message cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Append the message to the JSON file and JTable
        appendMessage("Student", message);
        tableModel.addRow(new Object[]{"Student", message});
        jTextArea1.setText(""); // Clear the text area
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(() -> {
            studentPanels log1 = new studentPanels();
            log1.setVisible(true);
            log1.pack();
            log1.setLocationRelativeTo(null);

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private keeptoo.KGradientPanel Quiz;
    private javax.swing.JTable chats;
    private keeptoo.KGradientPanel chooseCategory;
    public static javax.swing.JLabel count;
    public static javax.swing.JLabel count2;
    private javax.swing.JButton delete;
    private javax.swing.JButton easy;
    private javax.swing.JLabel give;
    private javax.swing.JTextField identify;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    private javax.swing.JButton leaderboard;
    private javax.swing.JButton message;
    private javax.swing.JButton mix;
    private keeptoo.KGradientPanel ms;
    private javax.swing.JLabel niknim;
    private keeptoo.KGradientPanel panel1;
    private keeptoo.KGradientPanel panel7;
    private keeptoo.KGradientPanel pnlcard;
    private javax.swing.JPanel profile;
    private javax.swing.JLabel question;
    private javax.swing.JButton review;
    private javax.swing.JButton search;
    private javax.swing.JButton send1;
    private javax.swing.JButton submit;
    private javax.swing.JButton takeQuiz;
    // End of variables declaration//GEN-END:variables
}
